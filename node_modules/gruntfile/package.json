{
  "_args": [
    [
      "gruntfile@^0.1.0",
      "/home/avigail/www/ltmuraalumni/Smart_School"
    ]
  ],
  "_from": "gruntfile@>=0.1.0 <0.2.0",
  "_id": "gruntfile@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/gruntfile",
  "_npmUser": {
    "email": "kyle@dontkry.com",
    "name": "shama"
  },
  "_npmVersion": "1.3.2",
  "_phantomChildren": {},
  "_requested": {
    "name": "gruntfile",
    "raw": "gruntfile@^0.1.0",
    "rawSpec": "^0.1.0",
    "scope": null,
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gruntfile/-/gruntfile-0.1.0.tgz",
  "_shasum": "049aff75c330a8a9b9f2d8f5af660e3e31ecc6b8",
  "_shrinkwrap": null,
  "_spec": "gruntfile@^0.1.0",
  "_where": "/home/avigail/www/ltmuraalumni/Smart_School",
  "author": {
    "email": "kyle@dontkry.com",
    "name": "Kyle Robinson Young",
    "url": "http://dontkry.com"
  },
  "bugs": {
    "url": "https://github.com/shama/gruntfile/issues"
  },
  "dependencies": {},
  "description": "Gruntfile helper for making modular gruntfiles.",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.9",
    "tape": "~1.0.4"
  },
  "directories": {},
  "dist": {
    "shasum": "049aff75c330a8a9b9f2d8f5af660e3e31ecc6b8",
    "tarball": "https://registry.npmjs.org/gruntfile/-/gruntfile-0.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/shama/gruntfile",
  "keywords": [
    "gruntfile",
    "gruntplugin",
    "modular"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shama/gruntfile/blob/master/LICENSE-MIT"
    }
  ],
  "maintainers": [
    {
      "email": "kyle@dontkry.com",
      "name": "shama"
    }
  ],
  "name": "gruntfile",
  "optionalDependencies": {},
  "readme": "# gruntfile\n\nGruntfile helper for making modular gruntfiles. This module will always set the\ncurrent working directory relative to the gruntfile. This allows you to use a\ngruntfile as a module.\n\n## example\n\nWe have a gruntfile that loads common things across many projects.\n\nFirst `npm install gruntfile --save` in a module and setup your gruntfile:\n\n**./node_modules/modulargrunt/Gruntfile.js**\n```js\nmodule.exports = require('gruntfile')(function(grunt) {\n  // These will become a default configs for inherited gruntfiles\n  grunt.initConfig({\n    browserify: {\n      dev: {\n        src: ['js/*.js'],\n        dest: 'dist/js/index.js',\n      },\n    },\n    compass: {\n      dev: {\n        options: {\n          sassDir: 'scss',\n          cssDir: 'dist/css',\n        },\n      },\n    },\n    jshint: {\n      all: ['js/*.js'],\n    },\n  });\n  // All tasks must be loaded relative to the module in node_modules\n  // This should also be --save as they're now dependencies\n  grunt.loadNpmTasks('grunt-contrib-compass');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-browserify');\n});\n```\n\nNow you can install your module with `npm install` (if published) or `npm link`\nas a local development dependency:\n\n**./Gruntfile.js**\n```js\nmodule.exports = function(grunt) {\n\n  // Init our modular gruntfile and return the tasks it uses\n  var tasks = require('modulargrunt')(grunt);\n\n  grunt.initConfig({\n    // Add new task config\n    watch: {\n      livereload: {\n        options: { livereload: true },\n        files: ['dist/**/*'],\n      },\n      js: {\n        files: ['js/*.js', 'Gruntfile.js'],\n        tasks: ['browserify'],\n      },\n      css: {\n        files: ['scss/*.scss'],\n        tasks: ['compass'],\n      },\n    },\n    // Override inherited task config\n    browserify: {\n      dev: {\n        src: ['js/*.js'],\n        dest: 'i/now/go/somewhere/else.js',\n      },\n    },\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  // Run the tasks from modulargrunt and append the watch task at the end\n  grunt.registerTask('default', tasks.concat('watch'));\n};\n```\n\n## api\n\n### `require('gruntfile')(gruntfile)`\nIt accepts a `gruntfile` function as the only argument and returns a wrapped\ngruntfile like `function(grunt, parentCWD)`.\n\nWill default the `cwd` relative to the gruntfile. If `parentCWD` is `false` then\nthe gruntfile has no parent otherwise it will be the path to the parent that\ncalled the child gruntfile.\n\nBy default it will return the tasks initialized within the modular gruntfile.\nYou can override this and return whatever you like instead:\n\n```js\nmodule.exports = require('gruntfile')(function(grunt, parentCWD) {\n\n  /* gruntfile stuff */\n\n  return ['some', 'other', 'tasks'];\n});\n```\n\n## Is this a good idea?\nI don't know. Probably not but a lot of people keep asking for this. FWIW, I've\nused a similar setup to this and it worked well. But I was always careful to\nkeep my gruntfiles as simple as possible.\n\n## Release History\n\n* 0.1.0 initial release\n\n## License\n\nCopyright (c) 2013 Kyle Robinson Young  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/shama/gruntfile.git"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "0.1.0"
}
